<?xml version="1.0" encoding="utf-8"?>
<launch>

    <arg name="run_rviz" default="true"/>
    <arg name="driver_usb_cam" value="false"/>
    <arg name="driver_cv_camera" value="false"/>
    <arg name="driver_openni2" value="false"/>
    <arg name="driver_astra" value="true"/>

    <arg name="log_calibration_data" default="true" />
    <arg name="calibration_data_filename" default="$(env HOME)/calib_transforms.txt" />

    <!-- parameters for bagging topic data to file -->
    <arg name="create_bag" default="false" />
    <arg name="savefile" default="/home/arwillis/extrinsic_calib.bag" />

    <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen"
          if="$(arg driver_usb_cam)">
        <param name="video_device" value="/dev/video0" />
        <param name="image_width" value="640" />
        <param name="image_height" value="480" />
        <param name="pixel_format" value="yuyv" />
        <param name="camera_frame_id" value="usb_cam" />
        <param name="io_method" value="mmap"/>
    </node>

    <node name="cv_camera_node" pkg="cv_camera" type="cv_camera_node"
          output="screen" if="$(arg driver_cv_camera)"/>

    <group if="$(arg driver_openni2)">
        <include file="$(find openni2_launch)/launch/openni2.launch"/>
    <arg name="camera_info" default="file://$(env HOME)/.ros/camera_info/rgb_PS1080_PrimeSense.yaml"/>
    </group>

    <group if="$(arg driver_astra)">
        <include file="$(find astra_launch)/launch/astra_pro.launch"/>
        <arg name="camera_info" default="file://$(env HOME)/.ros/camera_info/rgb_Astra_Orbbec.yaml"/>
    </group>


    <arg name="result_display" default="true"/>
    <arg name="result_autosize" default="true"/>
    <arg name="result_draw_markers" default="true" />
    <arg name="result_draw_markers_axis" default="true" />

    <arg name="uid" default=""/>
    <arg name="video_rectified" default="false" />

    <arg name="board_config" default="$(find calibrate_mocap_and_camera)/data/single/pose_calib_00.yml" />
    <arg name="board_frame_id" default="ar_calib_frame" />
    <arg name="marker_size" default="0.035" />
    <arg name="publish_tf" default="false" />

    <node ns="/" pkg="ar_sys" type="single_board" name="ar_single_board$(arg uid)" output="screen">
        <remap from="/camera_info" to="/cv_camera_node/camera_info" if="$(arg driver_cv_camera)"/>
        <remap from="/image" to="/cv_camera_node/image_raw" if="$(arg driver_cv_camera)"/>
        <remap from="/camera_info" to="/usb_cam/camera_info" if="$(arg driver_usb_cam)"/>
        <remap from="/image" to="/usb_cam/image_raw" if="$(arg driver_usb_cam)"/>
        <remap from="/camera_info" to="/camera/rgb/camera_info" if="$(arg driver_openni2)"/>
        <remap from="/image" to="/camera/rgb/image_raw" if="$(arg driver_openni2)"/>
        <remap from="/camera_info" to="/camera/rgb/camera_info" if="$(arg driver_astra)"/>
        <remap from="/image" to="/camera/rgb/image_raw" if="$(arg driver_astra)"/>

        <param name="image_is_rectified" type="bool" value="$(arg video_rectified)"/>
        <param name="board_config" type="string" value="$(arg board_config)"/>
        <param name="board_frame" type="string" value="/$(arg board_frame_id)" />
        <param name="marker_size" type="double" value="$(arg marker_size)"/>
        <param name="draw_markers" type="bool" value="$(arg result_draw_markers)" />
        <param name="draw_markers_axis" type="bool" value="$(arg result_draw_markers_axis)" />
        <param name="publish_tf" value="$(arg publish_tf)" />
    </node>

    <node ns="/" pkg="topic_tools" type="relay" name="ar_single_board_relay$(arg uid)" args="/ar_single_board$(arg uid)/transform /arsys_single_board/transform" />

    <group if="$(arg result_display)">
        <node ns="/" pkg="image_view" type="image_view" name="image_view$(arg uid)" output="screen">
            <remap from="image" to="/aruco_single_board$(arg uid)/result" />

            <param name="autosize" type="bool" value="$(arg result_autosize)" />
        </node>
    </group>


    <arg name="map_frame" default="optitrack" />
    <arg name="rgb_optical_frame" default="rgb_optical_frame" />

    <!-- parameters for ground truth experiments -->
    <!-- specify the vrpn server IP for transform ground truth -->
    <arg name="use_optitrack" default="true" />
    <arg name="vrpn_server_ip" default="192.168.1.104" />
    <arg name="vrpn_tf_calib_marker_topic" default="/tf_calib" />
    <arg name="vrpn_tf_cam_marker_topic" default="/tf_cam" />

    <!-- parameters for real-time rviz visualization -->
    <arg name="path" default="$(find calibrate_mocap_and_camera)" />
    <arg name="rviz_config_file" default="calibrate_mocap_and_camera.rviz" />

    <arg name="bag_topics"
         default="/tf $(arg vrpn_tf_calib_marker_topic)/pose $(arg vrpn_tf_cam_marker_topic)/pose /ar_single_board/pose /ar_single_board/transform /ar_single_board/result /camera/rgb/image_raw /camera/rgb/camera_info"/>
    <!-- minimal topic set for calibration -->
    <!--
    <arg name="bag_topics"
         default="/tf $(arg vrpn_tf_calib_marker_topic)/pose $(arg vrpn_tf_cam_marker_topic)/pose /ar_single_board/pose /ar_single_board/transform"/>
    -->
    <node name="tf_calib" pkg="ros_vrpn_client"
          type="ros_vrpn_client" args="__name=$(arg vrpn_tf_calib_marker_topic)/pose _vrpn_server_ip:=$(arg vrpn_server_ip)"
          output="screen" if="$(arg use_optitrack)"/>

    <node name="tf_cam" pkg="ros_vrpn_client"
          type="ros_vrpn_client" args="__name=$(arg vrpn_tf_cam_marker_topic)/pose _vrpn_server_ip:=$(arg vrpn_server_ip)"
          output="screen" if="$(arg use_optitrack)"/>

    <node pkg="rosbag" type="record" name="rosbag_record_rgbd_odometry"
          args="record -o $(arg savefile) $(arg bag_topics)"
          if="$(arg create_bag)" />

    <node pkg="rviz" type="rviz" name="rviz" output="screen"
          args="-d $(arg path)/rviz/$(arg rviz_config_file)" if="$(arg run_rviz)"/>

    <node name="calibrate_mocap_and_camera" pkg="calibrate_mocap_and_camera"
        type="calibrate_mocap_and_camera"
        output="screen">

        <param name="tf_cam_topic" value="$(arg vrpn_tf_cam_marker_topic)/pose"/>
        <param name="tf_calib_topic" value="$(arg vrpn_tf_calib_marker_topic)/pose"/>
        <param name="ar_calib_topic" value="/ar_single_board/transform"/>
        <param name="optical_parent" value = "$(arg map_frame)"/>
        <param name="optical_frame" value = "$(arg rgb_optical_frame)"/>
        <param name="logdata" value = "$(arg log_calibration_data)"/>
        <param name="logfilename" value = "$(arg calibration_data_filename)"/>
    </node>
<!--
    <node name="optical_to_odom" pkg="tf"
          type="static_transform_publisher"
          args="0.0 0.01 0.01  -0.5 0.5 -0.5 -0.5 $(arg rgb_optical_frame) reefbot_base 100" />
-->
    <node name="tf_calib_to_ar_calib" pkg="tf"
        type="static_transform_publisher"
        args="0.00085 0.000385 -0.017555 0 0 0 1 $(arg vrpn_tf_calib_marker_topic) ar_calib_frame 100" />

    <node name="ar_calib_to_optical_ar_calib" pkg="tf"
        type="static_transform_publisher"
        args="0.0 0.0 0.0 0 0 0 1 ar_calib_frame ar_optical_frame 100" />
<!--
    <node name="global_calib" pkg="tf"
          type="static_transform_publisher"
          args="0.0 0.0 0.0  0 0 0 1 map tf_calib 100" />

        <node name="global_cam" pkg="tf"
              type="static_transform_publisher"
              args="0.0 0.0 0.0  0 0 0 1 map tf_cam 100" />
    -->

</launch>
